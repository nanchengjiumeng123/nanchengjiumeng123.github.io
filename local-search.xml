<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络基础</title>
    <link href="/2022/08/18/2022-08-18-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/18/2022-08-18-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用SM.MS、GitHub、OSS搭建图床</title>
    <link href="/2022/05/05/2022-05-05_%E4%BD%BF%E7%94%A8SM.MS%E3%80%81GitHub%E3%80%81OSS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2022/05/05/2022-05-05_%E4%BD%BF%E7%94%A8SM.MS%E3%80%81GitHub%E3%80%81OSS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>Markdown写文章一定绕不开一个问题：图片，我们插入的Blog的图片都是指向的是本地的路径。如果改变了本地图片存储的位置，MarkDown所引用的图片就无法显示，因此我们需要一个图床来存放我们的图片。</p><p>常用的图床有<code>SM.MS</code>、<code>OSS云服务</code>、<code>七牛云</code>、<code>GitHub</code>等等。</p><h1 id="使用sm.mspicgo搭建免费图床">1.使用SM.MS、PicGo搭建免费图床</h1><p><code>SM.MS</code>个人有免费的5g容量。对于我们写Blog是够用的。</p><h2 id="注册sm.ms图床">1.注册SM.MS图床</h2><p>我们访问<ahref="https://sm.ms/">SM.MS</a>注册自己的账户，就可以使用图床了。整体页面如下：</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.25.01.jpg" /></p><h2 id="配置图床">2.配置图床</h2><p>我们希望在写MarkDown的时候，插入图片到MarkDown的时候，就自动将图片上传到图床，不用我们自己手动将图片上传到图床后，再手动插入图片链接。因此我们可以使用<ahref="https://github.com/PicGo/Awesome-PicGo">PicGo</a>，一个用于快速上传图片并获取图片URL 链接的工具。</p><p><strong>配置API Token</strong></p><p>在<code>SM.MS</code>网址左侧，点击<code>API Token</code>，复制Token到下图位置。PicGo就可以将图片上传到我们的图床上。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.25.26.jpg" /></p><p><strong>MarkDown开启图片自动上传</strong></p><p>此时我们可以将图片拖拽到<code>PicGo</code>图标里获取到<code>SM.MS</code>返回的图片链接，然后再复制到我们的文件里，这是比较麻烦的。因此我们需要在MarkDown编辑工具里开启选项。我使用的<ahref="https://www.typora.net/">Typora</a>，因此在设置中找到<code>图像</code>，将规则设置为<code>上传图片</code>，由于我使用的是<code>PicGo</code>，因此上传服务选择的是<code>PicGo.app</code>。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.25.43.jpg" /></p><h1id="使用githubjsdelivrpicgo搭建免费图床">2.使用Github、jsdelivr、PicGo搭建免费图床</h1><h2 id="创建图床工程">1.创建图床工程</h2><p>新建一个project，自定义名称即可。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_17.09.29.jpg" /></p><h2 id="配置personal-access-tokens">2.配置Personal access tokens</h2><p>用户栏目下面的<code>Setting</code>。拉到页面最下方，点击<code>&lt;&gt; Developer settings</code> 然后再点击<code>Personal access tokes</code>，在<code>Select scopes</code>选项中勾选<strong>repo</strong>，生成accesstoken。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_17.09.54.jpg" /></p><blockquote><p>注意：这个token只显示一次，所以一定要自己保管好</p></blockquote><h2 id="picgo配置github">3.PicGo配置GitHub</h2><p>由于GitHub在国外，导致网速会比较慢，因此夹在图片这种大文件会比较慢。我们的<ahref="https://www.jsdelivr.com/">jsdelivr</a>便出现了，jsDelivr是一个免费开源的 CDN 解决方案。包含 JavaScript 库、jQuery 插件、CSS框架、字体等等 Web 上常用的静态资源。</p><p>重要的是jsDelivr在中国大陆也拥有超过数百个节点，因为jsDelivr拥有正规的ICP备案，解决了中国大陆的访问速度优化，实现真正的全球极速低延迟体验。</p><p>jsDelivr是免费的、不限制带宽的，可以加速NPM、Github内的文件。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_17.44.57.jpg" /></p><p>点击GitHub栏，复制第一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://cdn.jsdelivr.net/gh/user/repo@version/file<br></code></pre></td></tr></table></figure><p>在PicGo中如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">仓库名：username/project</span><br><span class="hljs-attr">分支名：默认main</span><br><span class="hljs-attr">Token：复制的Personal</span> <span class="hljs-string">access token</span><br><span class="hljs-attr">存储路径：指定文件夹，也可以不指定，就在工程当前目录下</span><br><span class="hljs-attr">自定义域名：https</span>:<span class="hljs-string">//cdn.jsdelivr.net/gh/user/repo@version</span><br><span class="hljs-attr">--user</span>:<span class="hljs-string">username</span><br><span class="hljs-attr">--repo</span>:<span class="hljs-string">your project</span><br><span class="hljs-attr">--version</span>:<span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>整体配置界面如下：</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_17.10.31.jpg" /></p><h2 id="上传图片">4.上传图片</h2><p>开启Markdown自动上传图片功能后，只要往Markdown中复制图片进去，则PicGo会自动把我们的图片上传到GitHub上。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_17.11.09.jpg" /></p><blockquote><p>图片的链接地址为：</p><p>https://cdn.jsdelivr.net/gh/username/project@version/路径(可选)/your_photo</p></blockquote><h1 id="使用aliyun-osspicgo搭建图床">3.使用AliyunOSS、PicGo搭建图床</h1><p>由于Github仓库有限制(不能大于1G且单个文件不能大于100M)，如果我们的文件图片过大，则加载图片还是会很慢，如果觉得GitHub速度还是不够快，我们则可以使用服务商的OSS服务。OSS服务商有多个，本文使用的是AliyunOSS。</p><h2 id="购买oss服务">1.购买OSS服务</h2><ul><li><p>开通<ahref="https://www.aliyun.com/product/oss/">阿里云OSS服务</a></p></li><li><p>在<ahref="https://common-buy.aliyun.com/?spm=5176.8465980.0.0.4e701450E6303q&amp;commodityCode=ossbag&amp;request=%7B%22region%22%3A%22china-common%22%7D#/buy">阿里云OSS</a>选择购买相应的存储OSS服务。</p></li></ul><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_18.09.51.jpg" /></p><h2 id="创建bucket">2.创建Bucket</h2><p>开通OSS且购买OSS服务之后，我们会有一个OSS的控制台界面，点击<strong>创建Bucket</strong>，出现如下界面：</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_21.57.33.jpg" /></p><p>关于流量费用的介绍，可以访问官方的帮助页面。通常选择「<strong>按量计费</strong>」。</p><p><strong>流量费用的多少取决于你使用阿里云图床的程度</strong>。一般来说，10元钱能管几个月。</p><p>为了便于理解「存储空间费用」和「流量费用」，可以简单<strong>将它们比作手机套餐的<code>月租</code>和<code>流量</code></strong>。如果你天天刷剧把4G流量用完了，仅仅交月租还不够，超标的流量也要掏钱的。</p><h2 id="添加accesskey">3. 添加AccessKey</h2><p>鼠标悬停头像，出现如下页面。选择<code>AccessKey管理</code>，点击创建，即可创建AccessKey。我选择的是直接使用。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_22.02.06.jpg" /></p><blockquote><p>如果选择的是添加子账户，则新建一个子账户后再获取AccessKet，注意到是需要给子账户添加OSS服务权限</p></blockquote><h2 id="配置picgo">4.配置PicGo</h2><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_22.08.42.jpg" /></p><p>其中：</p><ul><li><code>设定KeyId</code>和<code>设定KeySecret</code>处填写前面记录的<strong>AccessKeyID</strong>和<strong>AccessKey Secret</strong>。</li><li><code>设定存储空间名</code>处填写创建的Bucket的名字。</li><li><code>确定存储区域</code>也是在创建Bucket时设定的。如果忘记了，可在阿里云后台的Bucket概览界面查看，比如我的是<strong>oss-cn-beijing</strong>。见下图。</li></ul><table><thead><tr class="header"><th style="text-align: left;">Endpoint（地域节点）</th><th style="text-align: left;">Bucket 域名</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">oss-cn-beijing.aliyuncs.com</td><td style="text-align: left;">~.oss-cn-beijing.aliyuncs.com</td></tr></tbody></table><ul><li><code>指定存储路径</code>可填写为<strong>img/</strong>。</li></ul><h2 id="上传图片-1">5.上传图片</h2><p>同样，通过typora设置自动上传后，我们就可以直接在Markdown中插入图片。PicGo会自动将图片上传到OSS上，速度极快，所以花钱才是硬道理啊，:joy::joy::joy:。</p><figure><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_22.34.52.jpg"alt="iShot_2022-05-05_22.34.52" /><figcaption aria-hidden="true">iShot_2022-05-05_22.34.52</figcaption></figure><p>阿里云官网: <em>https://www.aliyun.com</em></p><blockquote><p>由于Gitee现在在慢慢增加防盗链的功能，建立在Gitee上的图床以后就不能再使用了。如果Gitee上的图片还能再外链，需要移动Markdown文件图片到阿里云OSS图床，可以在PicGo中增加插件pic-migrater。如果Gitee上的图片已经不能再外链，则现在没有具体的办法。迁移Gitee图床到OSS的具体操作。网上有很多的文章，此处不再详述，有需要的小伙伴可以去尝试一下。</p></blockquote><h1 id="free-image-resource">4. Free Image Resource</h1><p>:lollipop:: <a href="https://barnimages.com/">Beautiful Free Photosfor Everyone | Barnimages</a></p><p>:lollipop:: <a href="https://unsplash.com/">Beautiful Free Images&amp; Pictures | Unsplash</a></p><p>:lollipop:: <a href="https://pikwizard.com/">Free Commercial StockPhotos &amp; Royalty Free Images | PikWizard</a></p><p>:lollipop:: <a href="https://www.rawpixel.com/">Free Stock Photos,PNGs, Templates &amp; Mockups | rawpixel</a></p><p>:lollipop:: <ahref="https://www.splitshire.com/best-new-free-stock-photos/">Best newfree stock photos - SplitShire</a></p><hr /><p><strong>博客说明</strong></p><blockquote><p>文章所涉及的资料来自互联网整理和个人总结，意在于个人学习和经验汇总，不用于任何的商业用途。如有侵权，请联系本人删除。谢谢！)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图床搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac使用Hexo、GitHub Pages搭建博客</title>
    <link href="/2022/05/03/2022-05-03_Mac%E4%BD%BF%E7%94%A8Hexo%E3%80%81GitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/05/03/2022-05-03_Mac%E4%BD%BF%E7%94%A8Hexo%E3%80%81GitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>该篇文章默认用户已经掌握Git、GitHub、Markdown相关知识，故不赘述。</p><p>了解Markdown的使用，可访问<a href="https://markdown.com.cn/">Markdown官方教程</a>。</p><h1 id="安装前提">1.安装前提</h1><p>在安装前，需要以下应用程序作为支持。如果没有安装以下应用程序则需要安装。</p><ul><li><a href="https://nodejs.org/en/">Node.js</a></li><li><a href="https://git-scm.com/">Git</a></li></ul><p>查看应用程序是否安装成功，显示出版本信息即为安装成功。</p><p>查看Node.js的版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><p>查看Git的版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git version<br></code></pre></td></tr></table></figure><h1 id="配置github-pages">2.配置GitHub Pages</h1><p>使用GitHub Pages前，应注意以下两点：</p><ul><li>GitHubPages使用HTTP协议，而不是HTTPS，请不要使用它传输敏感信息，比如密码或者银行账号。</li><li>即使你的仓库是私有的，GitHubPages也是公开在互联网中的，所以，如果您的仓库中具有敏感数据，请在发布前移除之。</li></ul><h2 id="基本页面的生成">1. 基本页面的生成</h2><p>创建一个新的 Repository，进入页面后，在 Repository name的位置填写域名，格式是<code>username.github.io</code>。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.19.01.jpg" /></p><h2 id="配置pages">2. 配置Pages</h2><p>创建成功之后，点击右上角的 Settings，找到 GitHub Pages 选项，选择一个GitHub 官方提供的主题，随意选择一个主题Cayman，来看看他的效果是什么样的。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.20.40.jpg" /></p><p>选择完毕之后 GitHub Pages就会自动生成好网站，在浏览器里输入你的项目名称，比如输入一个本文搭建的<ahref="https://nanchengjiumeng123.github.io/">nanchengjiumeng123.gitHub.io</a>，就可以看到刚刚选择的主题的个人网站的页面了。因此利用GitHubPages搭建的网站就可以访问了。</p><h1 id="配置hexo">3. 配置Hexo</h1><p><strong>hexo</strong>是一个快速，简洁且高效的博客框架精美的博客。常见的主题有<ahref="https://jekyllrb.com/">Jekyll</a>、<ahref="https://hexo.io/zh-cn/">Hexo</a>等等。本文使用Hexo为GitHubPages配置主题。</p><h2 id="安装hexo">1.安装Hexo</h2><p>安装好Node.js之后，我们便可以使用<code>npm</code>命令。npm是node.js的包管理工具，用它来安装hexo。也可以使用brew来安装。</p><p>检查<ahref="https://link.segmentfault.com/?enc=ipg%2FvdF0TXBCuGZYSFrRYA%3D%3D.lxfJsSC4Lt8VxYtzC%2Bb1RfrvTELGXTWyrhKkqKSVUIM%3D">npm</a>是否安装成功:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bas">npm -v<br></code></pre></td></tr></table></figure><p>输入命令安装Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><h2 id="初始化blog">2.初始化Blog</h2><p>安装完成后，我们在一个指定位置在创建一个blog文件夹，在该文件夹下初始化我们的博客。文件路径取自定义的文件路径，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /Users/wangwang/Desktop/blog <br></code></pre></td></tr></table></figure><p>在该文件件目录下执行博客初始化操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 会下载一些node.js的依赖文件</span><br>hexo init<br></code></pre></td></tr></table></figure><p>初始化成功后，在blog目录下执行预览操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s <br></code></pre></td></tr></table></figure><p>当看到如下输出就可以预览我们创建的博客了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>预览效果：</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.20.55.jpg" /></p><h2 id="常用hexo常用命令">3.常用hexo常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&quot;博客名称&quot;</span>  =&gt; hexo new <span class="hljs-string">&quot;博客名称&quot;</span>   <span class="hljs-comment">#这两个都是创建新文章，前者是简写模式</span><br>hexo p  =&gt; hexo publish<br>hexo g  =&gt; hexo generate  <span class="hljs-comment">#生成静态网页</span><br>hexo s  =&gt; hexo server  <span class="hljs-comment">#启动服务预览</span><br>hexo d  =&gt; hexo deploy  <span class="hljs-comment">#部署  </span><br><br>hexo server   <span class="hljs-comment">#Hexo 会监视文件变动并自动更新，无须重启服务器。</span><br>hexo server -s   <span class="hljs-comment">#静态模式</span><br>hexo server -p 5000   <span class="hljs-comment">#更改端口</span><br>hexo server -i 192.168.1.1   <span class="hljs-comment">#自定义IP</span><br>hexo clean   <span class="hljs-comment">#清除缓存，网页正常情况下可以忽略此条命令</span><br></code></pre></td></tr></table></figure><h2 id="相关主题资源">4.相关主题资源</h2><ul><li><p><a href="http://jekyllthemes.org/">jekyllthemes</a></p></li><li><p><ahref="https://jekyll-themes.com/free/">jekyll-themes</a></p></li><li><p><a href="https://hexo.io/themes/">hexo.io-themes</a></p></li></ul><h1 id="配置ssh-key">4.配置SSH Key</h1><p>在命令行输入配置用户名和账号的命令，其中 <code>username</code>是你的用户名，<code>email@gmail.com</code>是你github的登录邮箱。自行替换相应字段，比如邮箱等等。如果已经配置过，该步骤可以忽略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@gmail.com&quot;</span><br></code></pre></td></tr></table></figure><p>然后通过终端命令生成SSH Key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;@gmail.com&quot;</span><br></code></pre></td></tr></table></figure><p>如果已经创建过会出现 <code>Overwrite (y/n)? n</code>提示可以输入<code>n</code>，如果没有创建过会要求我们输入密码，然后一路回车下去就行，执行完成后会在<code>~/.ssh/id_rsa.pub</code>目录下生成需要使用的 key。</p><p>可以使用命令行输出key并复制，或者找到这个文件并打开它，复制里面的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>登录github账号 找到<code>Setting</code>，<strong>注意不是项目的<code>Setting</code>，是用户栏目下面的<code>Setting</code></strong>。先点击<code>SSH and GPG keys</code> 然后再点击<code>New SSH key</code>进入到配置 SSH Key的页面，然后输入复制好的key的内容。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.21.31.jpg" /></p><p>测试是否修改成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果出现<code>Hi xxxx! You've successfully authenticated...</code>则表示配置成功。</p><h1 id="发布">5. 发布</h1><p>到此处我们已经配置好了Hexo与GitHubpages，由于hexo安装好还未配置主题。因此我们可以使用Hexo定义主题，本文选用的是<code>Fliud</code>主题，如果想使用其他主题则需要自己去获取相关主题资源。</p><p>如何安装该主题已经在<ahref="https://hexo.fluid-dev.com/docs/start/">Hexo Fliud用户手册</a>里讲的十分透彻。需要注意以下几点，这是我走的弯路。</p><ul><li><p>复制的<code>_config.fluid.yml</code>文件是文件夹<code>node_module</code>下<code>hexo-theme-fluid</code>的<code>_config.yml</code>文件。不是FluidGitHub上工程的<code>_config.fluid.yml</code></p></li><li><p>如果没有<code>node_module</code>则先跟着文档安装Fuild主题后，依次执行，则会出现该文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hexo clean<br>Hexo g<br></code></pre></td></tr></table></figure></li></ul><h2 id="生成文件及本地调试">1.生成文件及本地调试</h2><p>初始化后执行 <code>hexo generate</code> 或 <code>hexo g</code>可生成静态文件（<code>public</code>文件夹）与缓存文件（<code>data.json</code>）。</p><p>然后我们执行 <code>hexo server</code> 或 <code>hexo s</code>就可以启动本地服务器，访问网址 <code>http://localhost:4000/</code>就可以查看文章效果了。</p><h2 id="发布文件">2.发布文件</h2><p>Hexo发布文件到GitHub需要安装<code>deployer</code>插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改配置文件 <code>_config.yml</code>，修改<code>deploy</code>部分为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>然后就可以把博客push到对应的<code>username</code>的GitHub上，在命令行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#清空静态文件与缓存文件</span><br>hexo clean<br><span class="hljs-comment">#生成我们想要的博客文件</span><br>hexo g<br><span class="hljs-comment">#将本地的博客文件push到github</span><br>hexo d<br></code></pre></td></tr></table></figure><p><code>hexo d</code>执行成功后，就可以查看我们的Blog了，可以发现我们的Blog主题已经改变为<code>Fluid</code>主题样式，可以根据文档自定义自己的主题样式。</p><p><strong>导航</strong> ：</p><p>:lollipop:: <a href="https://hexo.fluid-dev.com/docs/start/">FluidStart</a> :lollipop:: <ahref="https://hexo.fluid-dev.com">Fluid主题界面</a></p><h1 id="自定义域名">6. 自定义域名</h1><p>此时，我们已经完成一个Blog的基本功能，每次写了新的文件即可通过hexo相关命令发布到GitHubPages上。过几分后即可查看我们新发布的文章。但是Blog的网址为<code>username.github.io</code>难免不太好看，我们因此可以使用自定义域名。</p><h2 id="获取域名">1.获取域名</h2><p>使用<ahref="https://wanwang.aliyun.com/domain">阿里云域名</a>注册一个域名，现在购买域名需要实名认证，因此需要先实名认证后再购买域名。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.26.02.jpg" /></p><h2 id="配置dns">2.配置DNS</h2><p>首先获得自己的Github Page的IP地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping username.github.io<br></code></pre></td></tr></table></figure><p>也可以直接使用下面的IP地址</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><p>然后添加记录，有多少个IP地址就添加多少条记录。可以以下图所示作为参考设置：</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.21.56.jpg" /></p><h2 id="github-pages绑定域名">3.GitHub Pages绑定域名</h2><p>在GitHubPages如图配置里，在<code>Custon domain</code>写上自定义域名。出现<code>Your site is published at ...</code>在表明配置成功。在浏览器中填入自定义域名即可访问自己的Blog。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.19.01.jpg" /></p><p><strong>注：</strong></p><p>如果在发布之后，GitHubPages上自定义的域名<code>Custom domain</code>被还原。可以在Blog的<code>source</code>目录新建一个名为<code>CNAME</code>的文件，将自己的购买的域名填入进去即可。</p><h1 id="cdn加速">7. CDN加速</h1><p>由于GitHubPages的服务器在国外，国内访问会比较慢。因此可以配置CDN加速。常见的CDN加速有很多，我们选择<ahref="https://www.cloudflare.com/">Cloudflare</a>作为CDN加速，它有免费的加速版本，但是足够我们写Blog的需求了。俗话说：<code>可以不要，但不可以没有</code>，白嫖的它不香吗。</p><h2 id="添加站点">1. 添加站点</h2><p>首先访问选择<ahref="https://www.cloudflare.com/">Cloudflare</a>注册一个你自己的账户，然后添加自己的站点，我们将自己购买的域名作为自己的站点。提交之后会自动扫描域名对应的解析记录</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.22.20.jpg" /></p><h2 id="修改运营商dns">2.修改运营商DNS</h2><p>复制Cloudflare的DNS，通过域名的运营商修改对应的 DNS记录，由于我是在阿里云购买的域名，因此修改阿里云默认的DNS为</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.24.25.jpg" /></p><p>登陆自己的Blog，如果如下则表示配置成功。<code>cloudflare</code>不一定一直会提供免费版的，如果以后不再支持免费版，只需要把DNS 的解析记录再还原回去就行了。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.24.45.jpg" /></p><h1 id="hexo拓展">8.Hexo拓展</h1><p><ahref="https://so.csdn.net/so/search?q=Hexo&amp;spm=1001.2101.3001.7020">Hexo</a>默认是采用<code>hexo-renderer-marked</code>渲染器将markdown渲染成HTML，这个渲染器不支持插件扩展，因此不能支持表情；还有一个支持插件扩展的是<code>hexo-renderer-markdown-it</code>，所以我们可以使用这个渲染引擎来支持emoji表情。</p><h2 id="更换渲染器">1.更换渲染器</h2><p>进入blog跟目录，执行如下命令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm un hexo-renderer-marked --save<br>npm i hexo-renderer-markdown-it --save<br></code></pre></td></tr></table></figure></p><h2 id="安装emoji插件">2.安装emoji插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install markdown-it-emoji --save<br></code></pre></td></tr></table></figure><h2 id="编辑站点配置文件">3.编辑站点配置文件</h2><p>就是编辑根目录的_config.yml文件，添加如下内容:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Markdown-it config</span><br><span class="hljs-comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span><br><span class="hljs-attr">markdown:</span><br>  <span class="hljs-attr">render:</span><br>    <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span>          <span class="hljs-comment"># 是否对HTML标签进行解析，false时HTML将按照原样输出</span><br>    <span class="hljs-attr">xhtmlOut:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment"># 是否需要满足严格的XHTML格式，换行为&lt;br /&gt;</span><br>    <span class="hljs-attr">breaks:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">linkify:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">typographer:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">quotes:</span> <span class="hljs-string">&#x27;“”‘’&#x27;</span><br>  <span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-abbr</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-footnote</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-ins</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sub</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sup</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-emoji</span>  <span class="hljs-comment"># add emoji</span><br>  <span class="hljs-attr">anchors:</span><br>    <span class="hljs-comment"># Minimum level for ID creation. (Ex. h2 to h6)</span><br>    <span class="hljs-attr">level:</span> <span class="hljs-number">2</span><br>    <span class="hljs-comment"># A suffix that is prepended to the number given if the ID is repeated.</span><br>    <span class="hljs-attr">collisionSuffix:</span> <span class="hljs-string">&#x27;v&#x27;</span><br>    <span class="hljs-comment"># If `true`, creates an anchor tag with a permalink besides the heading.</span><br>    <span class="hljs-attr">permalink:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># Class used for the permalink anchor tag.</span><br>    <span class="hljs-attr">permalinkClass:</span> <span class="hljs-string">header-anchor</span><br>    <span class="hljs-comment"># The symbol used to make the permalink</span><br>    <span class="hljs-attr">permalinkSymbol:</span> <span class="hljs-string">¶</span><br></code></pre></td></tr></table></figure><h1 id="总结">9.总结</h1><p>到此，我们的一个完整的Blog就搭建成功了。以上过程都是自己全部一步一步做过来的。因此记录下来。供有想自己搭建独立博客的人做一个参考。当然，此时的博客在百度和谷歌都是搜索不到的。需要配置站点地图。我只配置的GooGle搜索。这些都相对简单因此不必再赘述，有想法的人可以搜索相关知识即可。</p><p>:lollipop:: <ahref="https://search.google.com/search-console">谷歌收录Google SearchConsole</a></p><hr /><p><strong>博客说明</strong></p><blockquote><p>文章所涉及的资料来自互联网整理和个人总结，意在于个人学习和经验汇总，不用于任何的商业用途。如有侵权，请联系本人删除。谢谢！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
