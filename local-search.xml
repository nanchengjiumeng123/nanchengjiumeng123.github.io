<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring框架介绍</title>
    <link href="/2022/05/10/framework/spring/2022-05-10_Spring%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/05/10/framework/spring/2022-05-10_Spring%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="背景">1.背景</h1><p>在 Enterprise Java Beans (EJB) 出现之前，Java 开发人员需要使用JavaBeans 来创建 Web 应用程序。尽管 JavaBeans 有助于开发用户界面 (UI)组件，但它们无法提供开发健壮且安全的企业应用程序所需的服务，例如事务管理和安全性。EJB的出现被视为这个问题的解决方案 EJB 扩展了 Java 组件，例如 Web和企业组件，并提供有助于企业应用程序开发的服务。然而，使用 EJB开发企业应用程序并不容易，因为开发人员需要执行各种任务，例如创建 Home 和Remote 接口以及实现生命周期回调方法，这导致为 EJB提供代码的复杂性由于这种复杂性，</p><h1 id="spring框架">2. Spring框架</h1><h2 id="介绍">2.1 介绍</h2><p><code>Spring 框架（通常称为 Spring）的出现是为了解决所有这些复杂问题</code>。该框架使用各种新技术，例如面向方面的编程(AOP)、Plain Old Java Object (POJO) 和依赖注入 (DI)，开发企业应用程序，从而消除使用 EJB开发企业应用程序时涉及的复杂性<strong>，Spring是一个开源轻量级框架，它允许 Java EE开发人员构建简单、可靠和可扩展的企业应用程序。该框架主要侧重于提供各种方式来帮助我们管理我们的业务对象。与经典的Java 框架和应用程序编程接口 (API)（例如 Java 数据库连接(JDBC)、JavaServer Pages (JSP) 和 Java Servlet）相比，它使 Web应用程序的开发更加容易。</strong></p><p>Spring框架可以看成是子框架的集合，也叫层，比如Spring AOP。Spring对象关系映射（Spring ORM）。Spring Web Flow 和 Spring WebMVC。它是用于开发企业应用程序的轻量级应用程序框架。在构建 Web应用程序时，我们可以单独使用这些模块中的任何一个。这些模块也可以组合在一起以在Web 应用程序中提供更好的功能。由于依赖注入，Spring框架是松散耦合的。</p><blockquote><p>Spring的形成，最初来自Rod Jahnson所著的一本很有影响力的书籍《<ahref="https://item.jd.com/68619611892.html">Expert One-on-One J2EEDesign andDevelopment在新窗口打开</a>》，就是在这本书中第一次出现了Spring的一些核心思想，该书出版于2002年。</p></blockquote><h2 id="spring框架的演变">2.2 Spring框架的演变</h2><p>Spring Framework 于 2004 年首次发布，之后进行了重大的重大修订，如Spring 2.0 提供了 XML 命名空间和 AspectJ 支持，Spring 2.5提供了注解驱动的配置，Spring 3.0 提供了基于 Java 的@Configuration模型。spring 框架的最新版本是 4.0。它发布时支持 Java 8 和 Java EE 7技术。尽管我们仍然可以将 Spring 与旧版本的 java一起使用，但最低要求仅限于 Java SE 6。Spring 4.0 还支持 Java EE 7技术，例如 java 消息服务 (JMS) 2.0、java 持久性 API (JPA) 2.1、 Bean验证 1.1、servlet 3.1 和 JCache，如今spring已经来到了spring5.0。</p><h1 id="spring框架架构">3. Spring框架架构</h1><figure><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/framework/spring/Spring-Framework-Architecture-1677156614942-1.png"alt="Spring框架架构" /><figcaption aria-hidden="true">Spring框架架构</figcaption></figure><p>Spring 框架由七个模块组成，如上图所示。这些模块是 <strong>SpringCore、Spring AOP、Spring Web MVC、Spring DAO、Spring ORM、Springcontext</strong> 和 <strong>Spring Webflow</strong>。这些模块提供了不同的平台来开发不同的企业应用程序；例如，你可以使用Spring Web MVC 模块来开发基于 MVC 的应用程序。</p><h2 id="spring-框架模块">3.1 Spring 框架模块</h2><ul><li><p><strong>Spring Core：</strong> SpringCore模块是Spring框架的核心组件，提供了IoC容器，Spring容器有两种实现方式，分别是bean工厂和应用上下文。Bean工厂是使用 org.springframework.beans.factory.BeanFactory接口定义的，充当 bean 的容器。Bean工厂容器允许我们将依赖项的配置和规范与程序逻辑分离。在 Spring框架中，Bean 工厂充当中央 IoC容器，负责实例化应用程序对象。它还配置和组装这些对象之间的依赖关系。BeanFactory接口有许多实现。XmlBeanFactory 类是 BeanFactory接口最常见的实现。</p></li><li><p><strong>Spring AOP ：</strong>与将应用程序分解为对象层次结构的面向对象编程 (OOP) 类似，AOP将程序分解为方面或关注点。Spring AOP 模块允许我们在 Spring AOP 中的Spring 应用程序中实现关注点或方面，这些方面是常规的 Spring bean 或使用<span class="citation" data-cites="Aspect">@Aspect</span>注释注释的常规类。这些方面有助于应用程序的事务管理和日志记录以及故障监控。例如，在银行操作中需要事务管理，例如将金额从一个帐户转移到另一个账户，Spring AOP 模块提供了一个可以应用于事务 API 的事务管理抽象层。</p></li><li><p><strong>Spring ORM</strong> ：</p><p>Spring ORM 模块用于从应用程序中的数据库访问数据。它提供用于使用JDO、Hibernate 和 iBatis 操作数据库的 API。Spring ORM 支持DAO，它提供了一种便捷的方式来构建以下基于 DAO 的 ORM 解决方案：</p><ul><li>简单的声明式事务管理</li><li>透明的异常处理</li><li>线程安全的轻量级模板类</li><li>DAO 支持类</li><li>资源管理</li></ul></li><li><p><strong>Spring Web MVC ：</strong> Spring 的 Web MVC模块实现了用于创建 Web 应用程序的 MVC 架构。它将 Web应用程序的模型和视图组件的代码分开。在 Spring MVC中，当从浏览器生成请求时，它首先转到 DispatcherServlet类（前端控制器），该类使用一组处理程序映射将请求分派给控制器（SimpleFormController类或 AbstractWizardformController类）。控制器提取并处理请求中嵌入的信息，并将结果以模型对象的形式发送给DispatcherServlet 类。最后，DispatcherServlet 类使用 ViewResolver类将结果发送到视图，视图将这些结果显示给用户。</p></li><li><p><strong>Spring Web Flow</strong> ：</p><p>Spring Web Flow 模块是 Spring Web MVC 模块的扩展。Spring Web MVC框架提供了表单控制器，如SimpleFormController类和AbstractWizardFormController 类，以实现预定义的工作流。Spring WebFlow 有助于定义管理 Web 应用程序不同页面之间工作流的 XML 文件或 Java类。Spring Web Flow是单独发布的，可以通过http://www.springframework.org网站下载。</p><p>以下是 Spring Web Flow 的优点：</p><ul><li>通过在 XML 文件中定义 Web 流，可以清楚地提供应用程序不同 UI之间的流。</li><li>Web流定义可帮助我们虚拟地将应用程序拆分为不同的模块，并在多种情况下重用这些模块。</li></ul></li><li><p><strong>Spring Web DAO ：</strong> Spring 框架中的 DAO包通过使用数据访问技术（如 JDBC、Hibernate 或 JDO）提供 DAO支持。该模块通过消除提供繁琐的 JDBC 编码的需要引入了 JDBC抽象层。它还提供编程式和声明式事务管理类。Spring DAO 包支持异构 Java数据库连接和 O/R 映射，这有助于 Spring使用多种数据访问技术。为了方便快捷地访问数据库资源，Spring框架提供了抽象的DAO基类。Spring框架支持的每种数据访问技术都有多种实现。例如，在 JDBC 中，JdbcDaoSupport类及其方法用于访问 DataSource 实例和预配置的 JdbcTemplate实例。</p></li><li><p><strong>Spring Context ：</strong> Spring Context基于核心模块。也就是我们常说的<code>ApplicationContext</code>，org.springframework.context.ApplicationContext是BeanFactory的一个接口。该模块的特性源自org.springframework.beans 包，还支持国际化(I18N)、验证、事件传播和资源加载等功能。Application 上下文实现MessageSource 接口并向应用程序提供消息传递功能。</p></li></ul><h1 id="spring组件">4.Spring组件</h1><p>Spring Framework 相关组件：</p><figure><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/framework/spring/spring-framework-introduce-8.png"alt="spring-framework-introduce-8" /><figcaption aria-hidden="true">spring-framework-introduce-8</figcaption></figure><h2 id="core-containerspring的核心容器">4.1 CoreContainer（Spring的核心容器）</h2><p>Spring 的核心容器是其他模块建立的基础，由 Beans 模块、Core核心模块、Context 上下文模块和 SpEL表达式语言模块组成，没有这些核心容器，也不可能有 AOP、Web等上层的功能。具体介绍如下。</p><ul><li><p><strong>Beans模块</strong>：提供了框架的基础部分，包括控制反转[IOC]和依赖注入[DI]。</p></li><li><p><strong>Core 核心模块</strong>：封装了 Spring框架的底层部分，包括资源访问、类型转换及一些常用工具类。</p></li><li><p><strong>Context 上下文模块</strong>：建立在 Core 和 Beans模块的基础之上，集成 Beans模块功能并添加资源绑定、数据验证、国际化、Java EE支持、容器生命周期、事件传播等。ApplicationContext接口是上下文模块的焦点。</p></li><li><p><strong>SpEL模块</strong>：提供了强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从Spring 容器获取Bean，它也支持列表投影、选择和一般的列表聚合等。</p></li></ul><p>对应的源码模块如下：</p><hr /><figure><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/framework/spring/image-20230130162802973.png"alt="image-20230130162802973" /><figcaption aria-hidden="true">image-20230130162802973</figcaption></figure><h2 id="data-accessintegration数据访问集成">4.2 DataAccess/Integration（数据访问／集成）</h2><p>数据访问／集成层包括 JDBC、ORM、OXM、JMS 和 Transactions模块，具体介绍如下。</p><ul><li><strong>JDBC 模块</strong>：提供了一个 JDBC的样例模板，使用这些模板能消除传统冗长的 JDBC编码还有必须的事务控制，而且能享受到 Spring 管理事务的好处。</li><li><strong>ORM 模块</strong>：提供与流行的“对象-关系”映射框架无缝集成的API，包括 JPA、JDO、Hibernate 和 MyBatis 等。而且还可以使用 Spring事务管理，无需额外控制事务。</li><li><strong>OXM 模块</strong>：提供了一个支持 Object /XML映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。将 Java对象映射成 XML 数据，或者将XML 数据映射成 Java 对象。</li><li><strong>JMS 模块</strong>：指 Java 消息服务，提供一套“消息生产者、消息消费者”模板用于更加简单的使用 JMS，JMS用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</li><li><strong>Transactions事务模块</strong>：支持编程和声明式事务管理。</li></ul><p>对应的源码模块如下：</p><hr /><figure><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/framework/spring/image-20230130162935159.png"alt="image-20230130162935159" /><figcaption aria-hidden="true">image-20230130162935159</figcaption></figure><h2 id="web模块">4.3 Web模块</h2><p>Spring 的 Web 层包括 Web、Servlet、WebSocket 和 Webflux组件，具体介绍如下。</p><ul><li><strong>Web 模块</strong>：提供了基本的 Web开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IOC容器初始化以及 Web 应用上下文。</li><li><strong>Servlet 模块</strong>：提供了一个 Spring MVC Web框架实现。Spring MVC框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的JSP 标签，完全无缝与 Spring 其他技术协作。</li><li><strong>WebSocket模块</strong>：提供了简单的接口，用户只要实现响应的接口就可以快速的搭建WebSocket Server，从而实现双向通讯。</li><li><strong>Webflux 模块</strong>： Spring WebFlux 是 Spring Framework5.x中引入的新的响应式web框架。与Spring MVC不同，它不需要ServletAPI，是完全异步且非阻塞的，并且通过Reactor项目实现了ReactiveStreams规范。Spring WebFlux用于创建基于事件循环执行模型的完全异步且非阻塞的应用程序。</li></ul><p>此外Spring4.x中还有Portlet 模块，在Spring 5.x中已经移除</p><ul><li><strong>Portlet 模块</strong>：提供了在 Portlet 环境中使用 MVC实现，类似 Web-Servlet 模块的功能。</li></ul><p>对应的源码模块如下：</p><hr /><figure><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/framework/spring/image-20230130163141867.png"alt="image-20230130163141867" /><figcaption aria-hidden="true">image-20230130163141867</figcaption></figure><h2 id="aopaspectsinstrumentation和messaging">4.4AOP、Aspects、Instrumentation和Messaging</h2><p>在 Core Container 之上是 AOP、Aspects 等模块，具体介绍如下：</p><ul><li><strong>AOP模块</strong>：提供了面向切面编程实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中，这样各司其职，降低业务逻辑和通用功能的耦合。</li><li><strong>Aspects 模块</strong>：提供与 AspectJ的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。</li><li><strong>Instrumentation模块</strong>：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li><li><strong>messaging 模块</strong>：Spring 4.0以后新增了消息（Spring-messaging）模块，该模块提供了对消息传递体系结构和协议的支持。</li><li><strong>jcl 模块</strong>： Spring5.x中新增了日志框架集成的模块。</li></ul><p>对应的源码模块如下：</p><hr /><figure><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/framework/spring/image-20230130163330973.png"alt="image-20230130163330973" /><figcaption aria-hidden="true">image-20230130163330973</figcaption></figure><h2 id="test模块">4.5 Test模块</h2><p>Test 模块：Spring 支持 Junit 和 TestNG测试框架，而且还额外提供了一些基于 Spring 的测试功能，比如在测试 Web框架时，模拟 Http 请求的功能。</p><p>包含Mock Objects, TestContext Framework, Spring MVC Test,WebTestClient。</p><p>对应的源码模块如下：</p><hr /><figure><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/framework/spring/image-20230130163426380.png"alt="image-20230130163426380" /><figcaption aria-hidden="true">image-20230130163426380</figcaption></figure><blockquote><p>这也印证了前面所说的观点：Spring框架是松散耦合的，可以看成是子框架的集合</p></blockquote><h1 id="如何学习spring">5.如何学习spring?</h1><ul><li><p>Spring官方网站：<ahref="http://www.springframework.org/">http://www.springframework.org</a></p></li><li><p>Spring 官方各个版本文档：<ahref="https://docs.spring.io/spring-framework/docs/">https://docs.spring.io/spring-framework/docs/</a></p></li><li><p>Github地址：<ahref="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p></li></ul><h1 id="read-more">6.Read more</h1><p>:lollipop::https://pdai.tech/md/spring/spring-x-framework-introduce.html</p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用SM.MS、GitHub、OSS搭建图床</title>
    <link href="/2022/05/05/2022-05-05_%E4%BD%BF%E7%94%A8SM.MS%E3%80%81GitHub%E3%80%81OSS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2022/05/05/2022-05-05_%E4%BD%BF%E7%94%A8SM.MS%E3%80%81GitHub%E3%80%81OSS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>Markdown写文章一定绕不开一个问题：图片，我们插入的Blog的图片都是指向的是本地的路径。如果改变了本地图片存储的位置，MarkDown所引用的图片就无法显示，因此我们需要一个图床来存放我们的图片。</p><p>常用的图床有<code>SM.MS</code>、<code>OSS云服务</code>、<code>七牛云</code>、<code>GitHub</code>等等。</p><h1 id="使用sm.mspicgo搭建免费图床">1.使用SM.MS、PicGo搭建免费图床</h1><p><code>SM.MS</code>个人有免费的5g容量。对于我们写Blog是够用的。</p><h2 id="注册sm.ms图床">1.注册SM.MS图床</h2><p>我们访问<ahref="https://sm.ms/">SM.MS</a>注册自己的账户，就可以使用图床了。整体页面如下：</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.25.01.jpg" /></p><h2 id="配置图床">2.配置图床</h2><p>我们希望在写MarkDown的时候，插入图片到MarkDown的时候，就自动将图片上传到图床，不用我们自己手动将图片上传到图床后，再手动插入图片链接。因此我们可以使用<ahref="https://github.com/PicGo/Awesome-PicGo">PicGo</a>，一个用于快速上传图片并获取图片URL 链接的工具。</p><p><strong>配置API Token</strong></p><p>在<code>SM.MS</code>网址左侧，点击<code>API Token</code>，复制Token到下图位置。PicGo就可以将图片上传到我们的图床上。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.25.26.jpg" /></p><p><strong>MarkDown开启图片自动上传</strong></p><p>此时我们可以将图片拖拽到<code>PicGo</code>图标里获取到<code>SM.MS</code>返回的图片链接，然后再复制到我们的文件里，这是比较麻烦的。因此我们需要在MarkDown编辑工具里开启选项。我使用的<ahref="https://www.typora.net/">Typora</a>，因此在设置中找到<code>图像</code>，将规则设置为<code>上传图片</code>，由于我使用的是<code>PicGo</code>，因此上传服务选择的是<code>PicGo.app</code>。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.25.43.jpg" /></p><h1id="使用githubjsdelivrpicgo搭建免费图床">2.使用Github、jsdelivr、PicGo搭建免费图床</h1><h2 id="创建图床工程">1.创建图床工程</h2><p>新建一个project，自定义名称即可。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_17.09.29.jpg" /></p><h2 id="配置personal-access-tokens">2.配置Personal access tokens</h2><p>用户栏目下面的<code>Setting</code>。拉到页面最下方，点击<code>&lt;&gt; Developer settings</code> 然后再点击<code>Personal access tokes</code>，在<code>Select scopes</code>选项中勾选<strong>repo</strong>，生成accesstoken。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_17.09.54.jpg" /></p><blockquote><p>注意：这个token只显示一次，所以一定要自己保管好</p></blockquote><h2 id="picgo配置github">3.PicGo配置GitHub</h2><p>由于GitHub在国外，导致网速会比较慢，因此夹在图片这种大文件会比较慢。我们的<ahref="https://www.jsdelivr.com/">jsdelivr</a>便出现了，jsDelivr是一个免费开源的 CDN 解决方案。包含 JavaScript 库、jQuery 插件、CSS框架、字体等等 Web 上常用的静态资源。</p><p>重要的是jsDelivr在中国大陆也拥有超过数百个节点，因为jsDelivr拥有正规的ICP备案，解决了中国大陆的访问速度优化，实现真正的全球极速低延迟体验。</p><p>jsDelivr是免费的、不限制带宽的，可以加速NPM、Github内的文件。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_17.44.57.jpg" /></p><p>点击GitHub栏，复制第一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://cdn.jsdelivr.net/gh/user/repo@version/file<br></code></pre></td></tr></table></figure><p>在PicGo中如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">仓库名：username/project</span><br><span class="hljs-attr">分支名：默认main</span><br><span class="hljs-attr">Token：复制的Personal</span> <span class="hljs-string">access token</span><br><span class="hljs-attr">存储路径：指定文件夹，也可以不指定，就在工程当前目录下</span><br><span class="hljs-attr">自定义域名：https</span>:<span class="hljs-string">//cdn.jsdelivr.net/gh/user/repo@version</span><br><span class="hljs-attr">--user</span>:<span class="hljs-string">username</span><br><span class="hljs-attr">--repo</span>:<span class="hljs-string">your project</span><br><span class="hljs-attr">--version</span>:<span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>整体配置界面如下：</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_17.10.31.jpg" /></p><h2 id="上传图片">4.上传图片</h2><p>开启Markdown自动上传图片功能后，只要往Markdown中复制图片进去，则PicGo会自动把我们的图片上传到GitHub上。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_17.11.09.jpg" /></p><blockquote><p>图片的链接地址为：</p><p>https://cdn.jsdelivr.net/gh/username/project@version/路径(可选)/your_photo</p></blockquote><h1 id="使用aliyun-osspicgo搭建图床">3.使用AliyunOSS、PicGo搭建图床</h1><p>由于Github仓库有限制(不能大于1G且单个文件不能大于100M)，如果我们的文件图片过大，则加载图片还是会很慢，如果觉得GitHub速度还是不够快，我们则可以使用服务商的OSS服务。OSS服务商有多个，本文使用的是AliyunOSS。</p><h2 id="购买oss服务">1.购买OSS服务</h2><ul><li><p>开通<ahref="https://www.aliyun.com/product/oss/">阿里云OSS服务</a></p></li><li><p>在<ahref="https://common-buy.aliyun.com/?spm=5176.8465980.0.0.4e701450E6303q&amp;commodityCode=ossbag&amp;request=%7B%22region%22%3A%22china-common%22%7D#/buy">阿里云OSS</a>选择购买相应的存储OSS服务。</p></li></ul><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_18.09.51.jpg" /></p><h2 id="创建bucket">2.创建Bucket</h2><p>开通OSS且购买OSS服务之后，我们会有一个OSS的控制台界面，点击<strong>创建Bucket</strong>，出现如下界面：</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_21.57.33.jpg" /></p><p>关于流量费用的介绍，可以访问官方的帮助页面。通常选择「<strong>按量计费</strong>」。</p><p><strong>流量费用的多少取决于你使用阿里云图床的程度</strong>。一般来说，10元钱能管几个月。</p><p>为了便于理解「存储空间费用」和「流量费用」，可以简单<strong>将它们比作手机套餐的<code>月租</code>和<code>流量</code></strong>。如果你天天刷剧把4G流量用完了，仅仅交月租还不够，超标的流量也要掏钱的。</p><h2 id="添加accesskey">3. 添加AccessKey</h2><p>鼠标悬停头像，出现如下页面。选择<code>AccessKey管理</code>，点击创建，即可创建AccessKey。我选择的是直接使用。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_22.02.06.jpg" /></p><blockquote><p>如果选择的是添加子账户，则新建一个子账户后再获取AccessKet，注意到是需要给子账户添加OSS服务权限</p></blockquote><h2 id="配置picgo">4.配置PicGo</h2><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_22.08.42.jpg" /></p><p>其中：</p><ul><li><code>设定KeyId</code>和<code>设定KeySecret</code>处填写前面记录的<strong>AccessKeyID</strong>和<strong>AccessKey Secret</strong>。</li><li><code>设定存储空间名</code>处填写创建的Bucket的名字。</li><li><code>确定存储区域</code>也是在创建Bucket时设定的。如果忘记了，可在阿里云后台的Bucket概览界面查看，比如我的是<strong>oss-cn-beijing</strong>。见下图。</li></ul><table><thead><tr class="header"><th style="text-align: left;">Endpoint（地域节点）</th><th style="text-align: left;">Bucket 域名</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">oss-cn-beijing.aliyuncs.com</td><td style="text-align: left;">~.oss-cn-beijing.aliyuncs.com</td></tr></tbody></table><ul><li><code>指定存储路径</code>可填写为<strong>img/</strong>。</li></ul><h2 id="上传图片-1">5.上传图片</h2><p>同样，通过typora设置自动上传后，我们就可以直接在Markdown中插入图片。PicGo会自动将图片上传到OSS上，速度极快，所以花钱才是硬道理啊，:joy::joy::joy:。</p><figure><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-05_22.34.52.jpg"alt="iShot_2022-05-05_22.34.52" /><figcaption aria-hidden="true">iShot_2022-05-05_22.34.52</figcaption></figure><p>阿里云官网: <em>https://www.aliyun.com</em></p><blockquote><p>由于Gitee现在在慢慢增加防盗链的功能，建立在Gitee上的图床以后就不能再使用了。如果Gitee上的图片还能再外链，需要移动Markdown文件图片到阿里云OSS图床，可以在PicGo中增加插件pic-migrater。如果Gitee上的图片已经不能再外链，则现在没有具体的办法。迁移Gitee图床到OSS的具体操作。网上有很多的文章，此处不再详述，有需要的小伙伴可以去尝试一下。</p></blockquote><h1 id="free-image-resource">4. Free Image Resource</h1><p>:lollipop:: <a href="https://barnimages.com/">Beautiful Free Photosfor Everyone | Barnimages</a></p><p>:lollipop:: <a href="https://unsplash.com/">Beautiful Free Images&amp; Pictures | Unsplash</a></p><p>:lollipop:: <a href="https://pikwizard.com/">Free Commercial StockPhotos &amp; Royalty Free Images | PikWizard</a></p><p>:lollipop:: <a href="https://www.rawpixel.com/">Free Stock Photos,PNGs, Templates &amp; Mockups | rawpixel</a></p><p>:lollipop:: <ahref="https://www.splitshire.com/best-new-free-stock-photos/">Best newfree stock photos - SplitShire</a></p><hr /><p><strong>博客说明</strong></p><blockquote><p>文章所涉及的资料来自互联网整理和个人总结，意在于个人学习和经验汇总，不用于任何的商业用途。如有侵权，请联系本人删除。谢谢！)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图床搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac使用Hexo、GitHub Pages搭建博客</title>
    <link href="/2022/05/03/2022-05-03_Mac%E4%BD%BF%E7%94%A8Hexo%E3%80%81GitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/05/03/2022-05-03_Mac%E4%BD%BF%E7%94%A8Hexo%E3%80%81GitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>该篇文章默认用户已经掌握Git、GitHub、Markdown相关知识，故不赘述。</p><p>了解Markdown的使用，可访问<a href="https://markdown.com.cn/">Markdown官方教程</a>。</p><h1 id="安装前提">1.安装前提</h1><p>在安装前，需要以下应用程序作为支持。如果没有安装以下应用程序则需要安装。</p><ul><li><a href="https://nodejs.org/en/">Node.js</a></li><li><a href="https://git-scm.com/">Git</a></li></ul><p>查看应用程序是否安装成功，显示出版本信息即为安装成功。</p><p>查看Node.js的版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><p>查看Git的版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git version<br></code></pre></td></tr></table></figure><h1 id="配置github-pages">2.配置GitHub Pages</h1><p>使用GitHub Pages前，应注意以下两点：</p><ul><li>GitHubPages使用HTTP协议，而不是HTTPS，请不要使用它传输敏感信息，比如密码或者银行账号。</li><li>即使你的仓库是私有的，GitHubPages也是公开在互联网中的，所以，如果您的仓库中具有敏感数据，请在发布前移除之。</li></ul><h2 id="基本页面的生成">1. 基本页面的生成</h2><p>创建一个新的 Repository，进入页面后，在 Repository name的位置填写域名，格式是<code>username.github.io</code>。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.19.01.jpg" /></p><h2 id="配置pages">2. 配置Pages</h2><p>创建成功之后，点击右上角的 Settings，找到 GitHub Pages 选项，选择一个GitHub 官方提供的主题，随意选择一个主题Cayman，来看看他的效果是什么样的。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.20.40.jpg" /></p><p>选择完毕之后 GitHub Pages就会自动生成好网站，在浏览器里输入你的项目名称，比如输入一个本文搭建的<ahref="https://nanchengjiumeng123.github.io/">nanchengjiumeng123.gitHub.io</a>，就可以看到刚刚选择的主题的个人网站的页面了。因此利用GitHubPages搭建的网站就可以访问了。</p><h1 id="配置hexo">3. 配置Hexo</h1><p><strong>hexo</strong>是一个快速，简洁且高效的博客框架精美的博客。常见的主题有<ahref="https://jekyllrb.com/">Jekyll</a>、<ahref="https://hexo.io/zh-cn/">Hexo</a>等等。本文使用Hexo为GitHubPages配置主题。</p><h2 id="安装hexo">1.安装Hexo</h2><p>安装好Node.js之后，我们便可以使用<code>npm</code>命令。npm是node.js的包管理工具，用它来安装hexo。也可以使用brew来安装。</p><p>检查<ahref="https://link.segmentfault.com/?enc=ipg%2FvdF0TXBCuGZYSFrRYA%3D%3D.lxfJsSC4Lt8VxYtzC%2Bb1RfrvTELGXTWyrhKkqKSVUIM%3D">npm</a>是否安装成功:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bas">npm -v<br></code></pre></td></tr></table></figure><p>输入命令安装Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><h2 id="初始化blog">2.初始化Blog</h2><p>安装完成后，我们在一个指定位置在创建一个blog文件夹，在该文件夹下初始化我们的博客。文件路径取自定义的文件路径，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /Users/wangwang/Desktop/blog <br></code></pre></td></tr></table></figure><p>在该文件件目录下执行博客初始化操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 会下载一些node.js的依赖文件</span><br>hexo init<br></code></pre></td></tr></table></figure><p>初始化成功后，在blog目录下执行预览操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s <br></code></pre></td></tr></table></figure><p>当看到如下输出就可以预览我们创建的博客了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>预览效果：</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.20.55.jpg" /></p><h2 id="常用hexo常用命令">3.常用hexo常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&quot;博客名称&quot;</span>  =&gt; hexo new <span class="hljs-string">&quot;博客名称&quot;</span>   <span class="hljs-comment">#这两个都是创建新文章，前者是简写模式</span><br>hexo p  =&gt; hexo publish<br>hexo g  =&gt; hexo generate  <span class="hljs-comment">#生成静态网页</span><br>hexo s  =&gt; hexo server  <span class="hljs-comment">#启动服务预览</span><br>hexo d  =&gt; hexo deploy  <span class="hljs-comment">#部署  </span><br><br>hexo server   <span class="hljs-comment">#Hexo 会监视文件变动并自动更新，无须重启服务器。</span><br>hexo server -s   <span class="hljs-comment">#静态模式</span><br>hexo server -p 5000   <span class="hljs-comment">#更改端口</span><br>hexo server -i 192.168.1.1   <span class="hljs-comment">#自定义IP</span><br>hexo clean   <span class="hljs-comment">#清除缓存，网页正常情况下可以忽略此条命令</span><br></code></pre></td></tr></table></figure><h2 id="相关主题资源">4.相关主题资源</h2><ul><li><p><a href="http://jekyllthemes.org/">jekyllthemes</a></p></li><li><p><ahref="https://jekyll-themes.com/free/">jekyll-themes</a></p></li><li><p><a href="https://hexo.io/themes/">hexo.io-themes</a></p></li></ul><h1 id="配置ssh-key">4.配置SSH Key</h1><p>在命令行输入配置用户名和账号的命令，其中 <code>username</code>是你的用户名，<code>email@gmail.com</code>是你github的登录邮箱。自行替换相应字段，比如邮箱等等。如果已经配置过，该步骤可以忽略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@gmail.com&quot;</span><br></code></pre></td></tr></table></figure><p>然后通过终端命令生成SSH Key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;@gmail.com&quot;</span><br></code></pre></td></tr></table></figure><p>如果已经创建过会出现 <code>Overwrite (y/n)? n</code>提示可以输入<code>n</code>，如果没有创建过会要求我们输入密码，然后一路回车下去就行，执行完成后会在<code>~/.ssh/id_rsa.pub</code>目录下生成需要使用的 key。</p><p>可以使用命令行输出key并复制，或者找到这个文件并打开它，复制里面的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>登录github账号 找到<code>Setting</code>，<strong>注意不是项目的<code>Setting</code>，是用户栏目下面的<code>Setting</code></strong>。先点击<code>SSH and GPG keys</code> 然后再点击<code>New SSH key</code>进入到配置 SSH Key的页面，然后输入复制好的key的内容。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.21.31.jpg" /></p><p>测试是否修改成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果出现<code>Hi xxxx! You've successfully authenticated...</code>则表示配置成功。</p><h1 id="发布">5. 发布</h1><p>到此处我们已经配置好了Hexo与GitHubpages，由于hexo安装好还未配置主题。因此我们可以使用Hexo定义主题，本文选用的是<code>Fliud</code>主题，如果想使用其他主题则需要自己去获取相关主题资源。</p><p>如何安装该主题已经在<ahref="https://hexo.fluid-dev.com/docs/start/">Hexo Fliud用户手册</a>里讲的十分透彻。需要注意以下几点，这是我走的弯路。</p><ul><li><p>复制的<code>_config.fluid.yml</code>文件是文件夹<code>node_module</code>下<code>hexo-theme-fluid</code>的<code>_config.yml</code>文件。不是FluidGitHub上工程的<code>_config.fluid.yml</code></p></li><li><p>如果没有<code>node_module</code>则先跟着文档安装Fuild主题后，依次执行，则会出现该文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hexo clean<br>Hexo g<br></code></pre></td></tr></table></figure></li></ul><h2 id="生成文件及本地调试">1.生成文件及本地调试</h2><p>初始化后执行 <code>hexo generate</code> 或 <code>hexo g</code>可生成静态文件（<code>public</code>文件夹）与缓存文件（<code>data.json</code>）。</p><p>然后我们执行 <code>hexo server</code> 或 <code>hexo s</code>就可以启动本地服务器，访问网址 <code>http://localhost:4000/</code>就可以查看文章效果了。</p><h2 id="发布文件">2.发布文件</h2><p>Hexo发布文件到GitHub需要安装<code>deployer</code>插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改配置文件 <code>_config.yml</code>，修改<code>deploy</code>部分为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>然后就可以把博客push到对应的<code>username</code>的GitHub上，在命令行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#清空静态文件与缓存文件</span><br>hexo clean<br><span class="hljs-comment">#生成我们想要的博客文件</span><br>hexo g<br><span class="hljs-comment">#将本地的博客文件push到github</span><br>hexo d<br></code></pre></td></tr></table></figure><p><code>hexo d</code>执行成功后，就可以查看我们的Blog了，可以发现我们的Blog主题已经改变为<code>Fluid</code>主题样式，可以根据文档自定义自己的主题样式。</p><p><strong>导航</strong> ：</p><p>:lollipop:: <a href="https://hexo.fluid-dev.com/docs/start/">FluidStart</a> :lollipop:: <ahref="https://hexo.fluid-dev.com">Fluid主题界面</a></p><h1 id="自定义域名">6. 自定义域名</h1><p>此时，我们已经完成一个Blog的基本功能，每次写了新的文件即可通过hexo相关命令发布到GitHubPages上。过几分后即可查看我们新发布的文章。但是Blog的网址为<code>username.github.io</code>难免不太好看，我们因此可以使用自定义域名。</p><h2 id="获取域名">1.获取域名</h2><p>使用<ahref="https://wanwang.aliyun.com/domain">阿里云域名</a>注册一个域名，现在购买域名需要实名认证，因此需要先实名认证后再购买域名。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.26.02.jpg" /></p><h2 id="配置dns">2.配置DNS</h2><p>首先获得自己的Github Page的IP地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping username.github.io<br></code></pre></td></tr></table></figure><p>也可以直接使用下面的IP地址</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><p>然后添加记录，有多少个IP地址就添加多少条记录。可以以下图所示作为参考设置：</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.21.56.jpg" /></p><h2 id="github-pages绑定域名">3.GitHub Pages绑定域名</h2><p>在GitHubPages如图配置里，在<code>Custon domain</code>写上自定义域名。出现<code>Your site is published at ...</code>在表明配置成功。在浏览器中填入自定义域名即可访问自己的Blog。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.19.01.jpg" /></p><p><strong>注：</strong></p><p>如果在发布之后，GitHubPages上自定义的域名<code>Custom domain</code>被还原。可以在Blog的<code>source</code>目录新建一个名为<code>CNAME</code>的文件，将自己的购买的域名填入进去即可。</p><h1 id="cdn加速">7. CDN加速</h1><p>由于GitHubPages的服务器在国外，国内访问会比较慢。因此可以配置CDN加速。常见的CDN加速有很多，我们选择<ahref="https://www.cloudflare.com/">Cloudflare</a>作为CDN加速，它有免费的加速版本，但是足够我们写Blog的需求了。俗话说：<code>可以不要，但不可以没有</code>，白嫖的它不香吗。</p><h2 id="添加站点">1. 添加站点</h2><p>首先访问选择<ahref="https://www.cloudflare.com/">Cloudflare</a>注册一个你自己的账户，然后添加自己的站点，我们将自己购买的域名作为自己的站点。提交之后会自动扫描域名对应的解析记录</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.22.20.jpg" /></p><h2 id="修改运营商dns">2.修改运营商DNS</h2><p>复制Cloudflare的DNS，通过域名的运营商修改对应的 DNS记录，由于我是在阿里云购买的域名，因此修改阿里云默认的DNS为</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.24.25.jpg" /></p><p>登陆自己的Blog，如果如下则表示配置成功。<code>cloudflare</code>不一定一直会提供免费版的，如果以后不再支持免费版，只需要把DNS 的解析记录再还原回去就行了。</p><p><imgsrc="https://nanchengjiumeng123.oss-cn-beijing.aliyuncs.com/categories/build_blog/iShot_2022-05-04_18.24.45.jpg" /></p><h1 id="hexo拓展">8.Hexo拓展</h1><p>Hexo默认是采用<code>hexo-renderer-marked</code>渲染器将markdown渲染成HTML，这个渲染器不支持插件扩展，因此不能支持表情；还有一个支持插件扩展的是<code>hexo-renderer-markdown-it</code>，所以我们可以使用这个渲染引擎来支持emoji表情。</p><h2 id="更换渲染器">1.更换渲染器</h2><p>进入blog跟目录，执行如下命令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm un hexo-renderer-marked --save<br>npm i hexo-renderer-markdown-it --save<br></code></pre></td></tr></table></figure></p><h2 id="安装emoji插件">2.安装emoji插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install markdown-it-emoji --save<br></code></pre></td></tr></table></figure><h2 id="编辑站点配置文件">3.编辑站点配置文件</h2><p>就是编辑根目录的_config.yml文件，添加如下内容:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Markdown-it config</span><br><span class="hljs-comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span><br><span class="hljs-attr">markdown:</span><br>  <span class="hljs-attr">render:</span><br>    <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span>          <span class="hljs-comment"># 是否对HTML标签进行解析，false时HTML将按照原样输出</span><br>    <span class="hljs-attr">xhtmlOut:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment"># 是否需要满足严格的XHTML格式，换行为&lt;br /&gt;</span><br>    <span class="hljs-attr">breaks:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">linkify:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">typographer:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">quotes:</span> <span class="hljs-string">&#x27;“”‘’&#x27;</span><br>  <span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-abbr</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-footnote</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-ins</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sub</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sup</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-emoji</span>  <span class="hljs-comment"># add emoji</span><br>  <span class="hljs-attr">anchors:</span><br>    <span class="hljs-comment"># Minimum level for ID creation. (Ex. h2 to h6)</span><br>    <span class="hljs-attr">level:</span> <span class="hljs-number">2</span><br>    <span class="hljs-comment"># A suffix that is prepended to the number given if the ID is repeated.</span><br>    <span class="hljs-attr">collisionSuffix:</span> <span class="hljs-string">&#x27;v&#x27;</span><br>    <span class="hljs-comment"># If `true`, creates an anchor tag with a permalink besides the heading.</span><br>    <span class="hljs-attr">permalink:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># Class used for the permalink anchor tag.</span><br>    <span class="hljs-attr">permalinkClass:</span> <span class="hljs-string">header-anchor</span><br>    <span class="hljs-comment"># The symbol used to make the permalink</span><br>    <span class="hljs-attr">permalinkSymbol:</span> <span class="hljs-string">¶</span><br></code></pre></td></tr></table></figure><h1 id="总结">9.总结</h1><p>到此，我们的一个完整的Blog就搭建成功了。以上过程都是自己全部一步一步做过来的。因此记录下来。供有想自己搭建独立博客的人做一个参考。当然，此时的博客在百度和谷歌都是搜索不到的。需要配置站点地图。我只配置的GooGle搜索。这些都相对简单因此不必再赘述，有想法的人可以搜索相关知识即可。</p><p>:lollipop:: <ahref="https://search.google.com/search-console">谷歌收录Google SearchConsole</a></p><hr /><p><strong>博客说明</strong></p><blockquote><p>文章所涉及的资料来自互联网整理和个人总结，意在于个人学习和经验汇总，不用于任何的商业用途。如有侵权，请联系本人删除。谢谢！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
